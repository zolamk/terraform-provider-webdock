// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/zolamk/terraform-provider-webdock/api"

	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// CreatePublicKey provides a mock function with given fields: ctx, body
func (_m *ClientInterface) CreatePublicKey(ctx context.Context, body api.CreatePublicKeyRequestBody) (*api.PublicKey, error) {
	ret := _m.Called(ctx, body)

	var r0 *api.PublicKey
	if rf, ok := ret.Get(0).(func(context.Context, api.CreatePublicKeyRequestBody) *api.PublicKey); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.CreatePublicKeyRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServer provides a mock function with given fields: ctx, body
func (_m *ClientInterface) CreateServer(ctx context.Context, body api.CreateServerRequestBody) (*api.Server, error) {
	ret := _m.Called(ctx, body)

	var r0 *api.Server
	if rf, ok := ret.Get(0).(func(context.Context, api.CreateServerRequestBody) *api.Server); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.CreateServerRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateShellUser provides a mock function with given fields: ctx, serverSlug, shellUser
func (_m *ClientInterface) CreateShellUser(ctx context.Context, serverSlug string, shellUser api.CreateShellUserRequestBody) (*api.ShellUser, error) {
	ret := _m.Called(ctx, serverSlug, shellUser)

	var r0 *api.ShellUser
	if rf, ok := ret.Get(0).(func(context.Context, string, api.CreateShellUserRequestBody) *api.ShellUser); ok {
		r0 = rf(ctx, serverSlug, shellUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ShellUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, api.CreateShellUserRequestBody) error); ok {
		r1 = rf(ctx, serverSlug, shellUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePublicKey provides a mock function with given fields: ctx, id
func (_m *ClientInterface) DeletePublicKey(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServer provides a mock function with given fields: ctx, serverSlug
func (_m *ClientInterface) DeleteServer(ctx context.Context, serverSlug string) (string, error) {
	ret := _m.Called(ctx, serverSlug)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, serverSlug)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serverSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteShellUser provides a mock function with given fields: ctx, serverSlug, shellUserID
func (_m *ClientInterface) DeleteShellUser(ctx context.Context, serverSlug string, shellUserID int64) (string, error) {
	ret := _m.Called(ctx, serverSlug, shellUserID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) string); ok {
		r0 = rf(ctx, serverSlug, shellUserID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, serverSlug, shellUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetEvents(ctx context.Context, params api.GetEventsParams) (api.Events, error) {
	ret := _m.Called(ctx, params)

	var r0 api.Events
	if rf, ok := ret.Get(0).(func(context.Context, api.GetEventsParams) api.Events); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetEventsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKeys provides a mock function with given fields: ctx
func (_m *ClientInterface) GetPublicKeys(ctx context.Context) (api.PublicKeys, error) {
	ret := _m.Called(ctx)

	var r0 api.PublicKeys
	if rf, ok := ret.Get(0).(func(context.Context) api.PublicKeys); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.PublicKeys)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerBySlug provides a mock function with given fields: ctx, serverSlug
func (_m *ClientInterface) GetServerBySlug(ctx context.Context, serverSlug string) (*api.Server, error) {
	ret := _m.Called(ctx, serverSlug)

	var r0 *api.Server
	if rf, ok := ret.Get(0).(func(context.Context, string) *api.Server); ok {
		r0 = rf(ctx, serverSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serverSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServers provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetServers(ctx context.Context, params api.GetServersParams) (api.Servers, error) {
	ret := _m.Called(ctx, params)

	var r0 api.Servers
	if rf, ok := ret.Get(0).(func(context.Context, api.GetServersParams) api.Servers); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Servers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetServersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServersImages provides a mock function with given fields: ctx
func (_m *ClientInterface) GetServersImages(ctx context.Context) (api.ServerImages, error) {
	ret := _m.Called(ctx)

	var r0 api.ServerImages
	if rf, ok := ret.Get(0).(func(context.Context) api.ServerImages); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ServerImages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServersLocations provides a mock function with given fields: ctx
func (_m *ClientInterface) GetServersLocations(ctx context.Context) (api.ServerLocations, error) {
	ret := _m.Called(ctx)

	var r0 api.ServerLocations
	if rf, ok := ret.Get(0).(func(context.Context) api.ServerLocations); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ServerLocations)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServersProfiles provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetServersProfiles(ctx context.Context, params api.GetServersProfilesParams) (api.ServerProfiles, error) {
	ret := _m.Called(ctx, params)

	var r0 api.ServerProfiles
	if rf, ok := ret.Get(0).(func(context.Context, api.GetServersProfilesParams) api.ServerProfiles); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ServerProfiles)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetServersProfilesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShellUsers provides a mock function with given fields: ctx, serverSlug
func (_m *ClientInterface) GetShellUsers(ctx context.Context, serverSlug string) (api.ShellUsers, error) {
	ret := _m.Called(ctx, serverSlug)

	var r0 api.ShellUsers
	if rf, ok := ret.Get(0).(func(context.Context, string) api.ShellUsers); ok {
		r0 = rf(ctx, serverSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ShellUsers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serverSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchServer provides a mock function with given fields: ctx, serverSlug, body
func (_m *ClientInterface) PatchServer(ctx context.Context, serverSlug string, body api.PatchServerRequestBody) (*api.Server, error) {
	ret := _m.Called(ctx, serverSlug, body)

	var r0 *api.Server
	if rf, ok := ret.Get(0).(func(context.Context, string, api.PatchServerRequestBody) *api.Server); ok {
		r0 = rf(ctx, serverSlug, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, api.PatchServerRequestBody) error); ok {
		r1 = rf(ctx, serverSlug, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReinstallServer provides a mock function with given fields: ctx, serverSlug, body
func (_m *ClientInterface) ReinstallServer(ctx context.Context, serverSlug string, body api.ReinstallServerRequestBody) (string, error) {
	ret := _m.Called(ctx, serverSlug, body)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, api.ReinstallServerRequestBody) string); ok {
		r0 = rf(ctx, serverSlug, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, api.ReinstallServerRequestBody) error); ok {
		r1 = rf(ctx, serverSlug, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResizeDryRun provides a mock function with given fields: ctx, serverSlug, body
func (_m *ClientInterface) ResizeDryRun(ctx context.Context, serverSlug string, body api.ResizeServerRequestBody) (*api.ServerResize, error) {
	ret := _m.Called(ctx, serverSlug, body)

	var r0 *api.ServerResize
	if rf, ok := ret.Get(0).(func(context.Context, string, api.ResizeServerRequestBody) *api.ServerResize); ok {
		r0 = rf(ctx, serverSlug, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ServerResize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, api.ResizeServerRequestBody) error); ok {
		r1 = rf(ctx, serverSlug, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResizeServer provides a mock function with given fields: ctx, serverSlug, body
func (_m *ClientInterface) ResizeServer(ctx context.Context, serverSlug string, body api.ResizeServerRequestBody) (string, error) {
	ret := _m.Called(ctx, serverSlug, body)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, api.ResizeServerRequestBody) string); ok {
		r0 = rf(ctx, serverSlug, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, api.ResizeServerRequestBody) error); ok {
		r1 = rf(ctx, serverSlug, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShellUserPublicKeys provides a mock function with given fields: ctx, serverSlug, shellUserID, publicKeys
func (_m *ClientInterface) UpdateShellUserPublicKeys(ctx context.Context, serverSlug string, shellUserID int64, publicKeys []int) (*api.ShellUser, error) {
	ret := _m.Called(ctx, serverSlug, shellUserID, publicKeys)

	var r0 *api.ShellUser
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, []int) *api.ShellUser); ok {
		r0 = rf(ctx, serverSlug, shellUserID, publicKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ShellUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, []int) error); ok {
		r1 = rf(ctx, serverSlug, shellUserID, publicKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientInterface(t mockConstructorTestingTNewClientInterface) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
